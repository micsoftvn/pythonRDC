{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get",
				"get_selected_server"
			],
			[
				"conn",
				"connect_string"
			],
			[
				"load",
				"load_server"
			],
			[
				"_",
				"__main__"
			],
			[
				"layou",
				"layout_loader"
			],
			[
				"trac",
				"track_list"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pyRDC.sublime-project",
			"settings":
			{
				"buffer_size": 341,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyRdc.py",
			"settings":
			{
				"buffer_size": 4537,
				"line_ending": "Windows"
			}
		},
		{
			"file": "pyRdcItem.py",
			"settings":
			{
				"buffer_size": 303,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n# Written by Robin Burchell\n# No licence specified or required, but please give credit where it's due,\n# and please let me know if this helped you. Feel free to contact with corrections or suggestions.\n#\n# We're using PySide, Nokia's official LGPL bindings.\n# You can however easily use PyQt (Riverside Computing's GPL bindings) by\n# commenting these and fixing the appropriate imports.\nfrom PySide.QtCore import *\nfrom PySide.QtGui import *\n#from PyQt4 import *\n#from PyQt4.QtCore import *\n#from PyQt4.QtGui import *\nimport sys\n\n# This is our model. It will maintain, modify, and present data to our view(s).\n# For more information on list models, take a look at:\n# http://doc.trolltech.com/4.6/qabstractitemmodel.html\nclass SimpleListModel(QAbstractListModel):\n def __init__(self, mlist):\n  QAbstractListModel.__init__(self)\n\n  # Store the passed data list as a class member.\n  self._items = mlist\n\n # We need to tell the view how many rows we have present in our data. see tutorial #3\n def rowCount(self, parent = QModelIndex()):\n  return len(self._items)\n\n # view is asking us about some of our data.\n # see tutorial #3 for more information on this.\n def data(self, index, role = Qt.DisplayRole):\n  if role == Qt.DisplayRole:\n   return QVariant(self._items[index.row()])\n  elif role == Qt.EditRole:\n   # The view is asking for the editable form of the data. i.e. unformatted.\n   # See the comment in setData().\n   return QVariant(self._items[index.row()])\n  else:\n   return QVariant()\n\n # the view is asking us to *change* some aspect of our data.\n # as in the above, it can be any aspect of the data, not *just* the information contained in the model.\n # remember to return true if you handle a data change, and false otherwise, always!\n # for more information, see:\n # http://doc.trolltech.com/4.6/qabstractitemmodel.html#setData\n def setData(self, index, value, role = Qt.EditRole):\n  # You might be expecting Qt.DisplayRole here, but no.\n  # Qt.DisplayRole is the *displayed* value of an item, like, a formatted currency value: \"$44.00\"\n  # Qt.EditRole is the raw data of an item, e.g. \"4400\" (as in cents).\n  if role == Qt.EditRole:\n   # set the data.\n   # the str() cast here is mostly for peace of mind, you can't perform some operations\n   # in python with Qt types, like pickling.\n   self._items[index.row()] = str(value.toString().toUtf8())\n\n   # *always* emit the dataChanged() signal after changing any data inside the model.\n   # this is so e.g. the different views know they need to do things with it.\n   #\n   # don't be lazy and pass a huge range of values to this, because it is processing-heavy.\n   #\n   # because we are a simple list, we only have one index to worry about for topleft/bottom right,\n   # so just reuse the index we are passed.\n   QObject.emit(self, SIGNAL(\"dataChanged(const QModelIndex&, const QModelIndex &)\"), index, index)\n   return True\n  # unhandled change.\n  return False\n\n # remove rows from our model.\n # 'row' is the row number to be removed, 'count' are the total number of rows to remove.\n # 'parent' is the 'parent' of the initial row: this is pretty much only relevant for tree models etc.\n # For more information, see:\n # http://doc.trolltech.com/4.6/qabstractitemmodel.html#removeRows\n def removeRows(self, row, count, parent = QModelIndex()):\n  # make sure the index is valid, to avoid IndexErrors ;)\n  if row < 0 or row > len(self._items):\n   return\n\n  # let the model know we're changing things.\n  # we may have to remove multiple rows, if not, this could be handled simpler.\n  self.beginRemoveRows(parent, row, row + count - 1)\n\n  # actually remove the items from our internal data representation\n  while count != 0:\n   del self._items[row]\n   count -= 1\n\n  # let the model know we're done\n  self.endRemoveRows()\n\n # while we could use QAbstractItemModel::insertRows(), we'd have to shoehorn around the API\n # to get things done: we'd need to call setData() etc.\n # The easier way, in this case, is to use our own method to do the heavy lifting.\n def addItem(self, item):\n  # The str() cast is because we don't want to be storing a Qt type in here.\n  self.beginInsertRows(QModelIndex(), len(self._items), len(self._items))\n  self._items.append(str(item))\n  self.endInsertRows()\n    \n\n# This widget is our view of the readonly list.\n# For more information, see:\n# http://doc.trolltech.com/4.6/qlistview.html\nclass SimpleListView(QListView):\n def __init__(self, parent = None):\n  QListView.__init__(self, parent)\n\n  # unlike the previous tutorial, we'll do background colours 'properly'. ;)\n  self.setAlternatingRowColors(True)\n  \n  # we want our listview to have a context menu taken from the actions on this widget\n  # those actions will be to delete an item :)\n  self.setContextMenuPolicy(Qt.ActionsContextMenu)\n\n  # create a menu item for our context menu that will delete the selected item.\n  a = QAction(\"Delete Selected\", self)\n\n  # hook up the triggered() signal on the menu item to the slot below.\n  QObject.connect(a, SIGNAL(\"triggered()\"), self, SLOT(\"onTriggered()\"))\n  self.addAction(a)\n\n # this is a slot! we covered signals and slots in tutorial #2,\n # but this is the first time we've created one ourselves.\n @pyqtSlot()\n def onTriggered(self):\n  # tell our model to remove the selected row.\n  self.model().removeRows(self.currentIndex().row(), 1)\n\n# Our main application window.\n# You should be used to this from previous tutorials.\nclass MyMainWindow(QWidget):\n def __init__(self):\n  QWidget.__init__(self, None)\n\n  # main section of the window\n  vbox = QVBoxLayout()\n\n  # create a data source:\n  self._model = SimpleListModel([\"test\", \"tes1t\", \"t3est\", \"t5est\", \"t3est\"])\n\n  # let's add two views of the same data source we just created:\n  v = SimpleListView()\n  v.setModel(self._model)\n  vbox.addWidget(v)\n\n  # second view..\n  v = SimpleListView()\n  v.setModel(self._model)\n  vbox.addWidget(v)\n\n  # bottom section of the window:\n  # let's have a text input and a pushbutton that add an item to our model.\n  hbox = QHBoxLayout()\n  self._itemedit = QLineEdit()\n\n  # create the button, and hook it up to the slot below.\n  b = QPushButton(\"Add Item\")\n  QObject.connect(b, SIGNAL(\"clicked()\"), self, SLOT(\"doAddItem()\"))\n\n  hbox.addWidget(self._itemedit)\n  hbox.addWidget(b)\n\n  # add bottom to main window layout\n  vbox.addLayout(hbox)\n\n  # set layout on the window\n  self.setLayout(vbox)\n\n @pyqtSlot()\n def doAddItem(self):\n  # instruct the model to add an item\n  self._model.addItem(self._itemedit.text())\n\n  # blank the text input.\n  self._itemedit.setText(\"\")\n\n# set things up, and run it. :)\nif __name__ == '__main__':\n app = QApplication(sys.argv)\n w = MyMainWindow()\n w.show()\n app.exec_()\n sys.exit()",
			"settings":
			{
				"buffer_size": 6703,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"command_palette":
	{
		"height": 61.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 386.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/scott_000/AppData/Roaming/Sublime Text 2/Packages/User/Package Control.sublime-settings",
		"/C/Users/scott_000/AppData/Roaming/Sublime Text 2/Packages/Package Control/Package Control.sublime-settings",
		"/C/Users/Scott/Documents/GitHub/TTShuffle/TTShuffle.sublime-project",
		"/C/Users/scott_000/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/Scott/Documents/GitHub/TTShuffle/manifest.json",
		"/C/Users/Scott/Documents/GitHub/TTShuffle/tts-script.js",
		"/C/Users/Scott/Documents/GitHub/TTShuffle/tts-style.css",
		"/C/Users/Scott/Documents/GitHub/TTShuffle/README.md",
		"/C/Users/Scott/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/Scott/Documents/GitHub/MKWTracker/MKTracker.pyw",
		"/C/Users/Scott/Documents/GitHub/MKWTracker/MKTracker2.pyw",
		"/C/Users/Scott/Documents/test.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"print",
			"git",
			"Tkinter.,",
			"N64"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Tkinter.E,",
			"Tkinter.W,"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pyRDC.sublime-project",
					"settings":
					{
						"buffer_size": 341,
						"regions":
						{
						},
						"selection":
						[
							[
								116,
								116
							]
						],
						"settings":
						{
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pyRdc.py",
					"settings":
					{
						"buffer_size": 4537,
						"regions":
						{
						},
						"selection":
						[
							[
								1036,
								1036
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 998.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "pyRdcItem.py",
					"settings":
					{
						"buffer_size": 303,
						"regions":
						{
						},
						"selection":
						[
							[
								303,
								303
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"settings":
					{
						"buffer_size": 6703,
						"regions":
						{
						},
						"selection":
						[
							[
								2873,
								2873
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 268.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 128.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 175.0,
	"status_bar_visible": true
}
